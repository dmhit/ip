(function () {
  "use strict";

  // --- КОНФИГУРАЦИЯ ---
  const CONFIG = {
    TOKEN: '{TOKEN}', // Плейсхолдер, заменяется загрузчиком
    API_BASE_URL: 'https://api.2ip.io',
    TARGET_PATH_REGEX: /^\/pl\/metrika\/user\//,
    AUTO_LOAD_COUNT: 7,
    REQUEST_DELAY_MS: 1000,
    RETRY_DELAY_MS: 1500,
    MAX_RETRIES: 7,
    CACHE_KEY_PREFIX: 'geo_ip_',
    ORIGINAL_TABLE_COLS: 7, // Исходное количество столбцов в таблице (для сброса colspan)
    TABLE_SELECTOR: 'table.table.table-striped.table-bordered:not(.bg-gray)',
    SUBTABLE_ROW_CLASS: 'row-hits',
    PAGINATION_SELECTOR: '.pagination .active a[data-page]',
    TAB_CONTENT_ID: '#tabContentVisits',
    TOGGLE_STORAGE_KEY: 'geoLookupEnabled', // Ключ для хранения состояния тумблера
    TOGGLE_POSITION: { right: '1%', top: '15%' } // Позиция тумблера
  };

  // --- ПРОВЕРКА СТРАНИЦЫ ---
  if (!CONFIG.TARGET_PATH_REGEX.test(window.location.pathname)) {
    console.log('GeoIP Enhanced: Не на целевой странице, завершение.');
    return;
  }
  console.log('GeoIP Enhanced: Запуск на целевой странице.');

  // --- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ---
  const Helpers = {
    isValidIP: function (ip) {
      const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
      return ipRegex.test(ip);
    },

    showNotification: function (message, targetElement) {
      const notification = document.createElement('div');
      notification.textContent = message;
      Object.assign(notification.style, {
        position: 'absolute',
        background: '#333',
        color: '#fff',
        padding: '5px 10px',
        borderRadius: '4px',
        zIndex: '1000',
        fontSize: '12px',
      });
      const rect = targetElement.getBoundingClientRect();
      notification.style.left = `${rect.left + window.scrollX}px`;
      notification.style.top = `${rect.bottom + window.scrollY + 5}px`;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 2000);
    },

    copyToClipboard: function (text, targetElement) {
      console.log(`GeoIP Enhanced: Попытка копирования: ${text}`);
      try {
        if (typeof text !== 'string') {
          throw new Error(`GeoIP Enhanced: Некорректное значение для копирования: ${text}`);
        }
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.cssText = 'position: fixed; opacity: 0;';
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        console.log(`GeoIP Enhanced: Скопировано: ${text}`);
        Helpers.showNotification(`Скопировано: ${text}`, targetElement);
        document.body.removeChild(textArea);
      } catch (err) {
        console.error('GeoIP Enhanced: Ошибка копирования:', err);
        Helpers.showNotification('Ошибка копирования', targetElement);
      }
    },
  };

  // --- КЭШ ---
  const Cache = {
    get: function (ip) {
      const key = CONFIG.CACHE_KEY_PREFIX + ip;
      const cached = sessionStorage.getItem(key);
      if (cached) {
        const data = JSON.parse(cached);
        console.log(`GeoIP Enhanced: Используем кэш для IP ${ip}:`, data);
        return data;
      }
      return null;
    },
    set: function (ip, data) {
      const key = CONFIG.CACHE_KEY_PREFIX + ip;
      sessionStorage.setItem(key, JSON.stringify(data));
      console.log(`GeoIP Enhanced: Сохранены кэшированные данные для IP ${ip}:`, data);
    },
  };

  // --- ОЧЕРЕДЬ ЗАПРОСОВ ---
  const RequestQueue = (function () {
    const queue = [];
    let processing = false;

    async function processQueue() {
      if (processing || queue.length === 0) return;
      processing = true;

      const { url, resolve, reject, retries, startTime } = queue.shift();
      try {
        console.log(`GeoIP Enhanced: Отправляем запрос: ${url}`);
        const response = await fetch(url);
        if (response.status === 429 && retries > 0) {
          console.log(`GeoIP Enhanced: 429 для ${url}, повтор через ${CONFIG.RETRY_DELAY_MS} мс, осталось: ${retries}`);
          queue.unshift({ url, resolve, reject, retries: retries - 1, startTime });
          setTimeout(processQueue, CONFIG.RETRY_DELAY_MS);
          processing = false;
          return;
        }
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        const data = await response.json();
        console.log(`GeoIP Enhanced: Получены данные для ${url}:`, data);
        resolve(data);
      } catch (error) {
        console.error(`GeoIP Enhanced: Ошибка для ${url}:`, error);
        reject(error);
      } finally {
        console.log(`GeoIP Enhanced: Запрос ${url} занял ${Date.now() - startTime} мс, ждём ${CONFIG.REQUEST_DELAY_MS} мс`);
        setTimeout(() => {
          processing = false;
          processQueue();
        }, CONFIG.REQUEST_DELAY_MS);
      }
    }

    function queueRequest(url) {
      return new Promise((resolve, reject) => {
        queue.push({
          url,
          resolve,
          reject,
          retries: CONFIG.MAX_RETRIES,
          startTime: Date.now(),
        });
        processQueue();
      });
    }

    return { queueRequest };
  })();

  // --- API ФУНКЦИИ ---
  const API = {
    fetchGeo: async function (ip) {
      const cached = Cache.get(ip);
      if (cached) return cached;

      try {
        const data = await RequestQueue.queueRequest(`${CONFIG.API_BASE_URL}/${ip}?token=${CONFIG.TOKEN}&lang=ru`);
        const result = {
          country: `${data.country || 'N/A'} (${data.code || ''} ${data.emoji || ''})`,
          city: `${data.city || 'N/A'} (${data.region || ''})`,
          provider: 'N/A' // Провайдер заполняется отдельно
        };
        Cache.set(ip, result);
        return result;
      } catch (error) {
        console.error(`GeoIP Enhanced: Ошибка получения гео для IP ${ip}:`, error);
        return { country: 'Ошибка', city: 'Ошибка', provider: 'N/A' };
      }
    },

    fetchWhois: async function (ip) {
      try {
        const data = await RequestQueue.queueRequest(`${CONFIG.API_BASE_URL}/whois/${ip}?token=${CONFIG.TOKEN}`);
        const provider = data.whois?.network?.name || 'N/A';
        const cached = Cache.get(ip) || { country: 'N/A', city: 'N/A', provider: 'N/A' };
        cached.provider = provider;
        Cache.set(ip, cached); // Обновляем кэш с провайдером
        return provider;
      } catch (error) {
        console.error(`GeoIP Enhanced: Ошибка получения WHOIS для IP ${ip}:`, error);
        return 'N/A';
      }
    }
  };

  // --- УПРАВЛЕНИЕ ФУНКЦИОНАЛЬНОСТЬЮ (ВКЛ/ВЫКЛ) ---
  const FeatureToggle = (function() {
    let isEnabled = sessionStorage.getItem(CONFIG.TOGGLE_STORAGE_KEY) !== 'false';
    let observer = null; // Ссылка на observer будет здесь

    function createToggle() {
        const toggleContainer = document.createElement('label');
        toggleContainer.style.position = 'fixed';
        toggleContainer.style.right = CONFIG.TOGGLE_POSITION.right;
        toggleContainer.style.top = CONFIG.TOGGLE_POSITION.top;
        toggleContainer.style.zIndex = '1000';
        toggleContainer.style.display = 'flex';
        toggleContainer.style.alignItems = 'center';
        toggleContainer.style.cursor = 'pointer';

        const toggleInput = document.createElement('input');
        toggleInput.type = 'checkbox';
        toggleInput.style.width = '20px';
        toggleInput.style.height = '20px';
        toggleInput.style.marginRight = '1px';
        toggleInput.style.cursor = 'pointer';
        toggleInput.checked = isEnabled; // Устанавливаем состояние из sessionStorage

        const toggleLabel = document.createElement('span');
        toggleLabel.textContent = 'GeoIP: Выкл/Вкл';
        toggleLabel.style.fontSize = '16px';
        toggleLabel.style.color = '#333';

        toggleContainer.appendChild(toggleInput);
        toggleContainer.appendChild(toggleLabel);
        document.body.appendChild(toggleContainer);

        toggleInput.addEventListener('change', function() {
            isEnabled = this.checked;
            sessionStorage.setItem(CONFIG.TOGGLE_STORAGE_KEY, isEnabled);
            console.log(`GeoIP Enhanced: Функция включена: ${isEnabled}`);
            if (isEnabled) {
                enableFeatures();
            } else {
                disableFeatures();
            }
        });

        console.log('GeoIP Enhanced: Тумблер создан.');
    }

    function enableFeatures() {
        console.log('GeoIP Enhanced: Включаю функциональность.');
        TableManager.initGeoLookup();
        TableManager.adjustSubtableColspan();
        if (observer) {
            observer.observe(document.querySelector(CONFIG.TAB_CONTENT_ID) || document.body, { childList: true, subtree: true });
            console.log('GeoIP Enhanced: MutationObserver запущен.');
        }
    }

    function disableFeatures() {
        console.log('GeoIP Enhanced: Отключаю функциональность.');
        TableManager.removeGeoColumnsAndHandlers();
        if (observer) {
            observer.disconnect();
            console.log('GeoIP Enhanced: MutationObserver отключён.');
        }
    }

    function isFeatureEnabled() {
        return isEnabled;
    }

    return { createToggle, enableFeatures, disableFeatures, isFeatureEnabled };
  })();

  // --- РАБОТА С ТАБЛИЦЕЙ ---
  const TableManager = (function () {
    let isProcessing = false;

    function adjustSubtableColspan() {
        const headerRow = document.querySelector(`${CONFIG.TABLE_SELECTOR} thead tr`);
        if (!headerRow) return false;

        const totalColumns = headerRow.children.length;
        const subRows = document.querySelectorAll(`tr.${CONFIG.SUBTABLE_ROW_CLASS}`);
        let adjusted = false;

        subRows.forEach(subRow => {
            const subTd = subRow.querySelector('td[colspan]');
            if (subTd && subTd.getAttribute('colspan') !== totalColumns.toString()) {
                console.log(`GeoIP Enhanced: Корректирую colspan подтаблицы: ${subTd.getAttribute('colspan')} -> ${totalColumns}`);
                subTd.setAttribute('colspan', totalColumns);
                adjusted = true;
            }
        });
        return adjusted;
    }

    function removeGeoColumnsAndHandlers() {
        console.log('GeoIP Enhanced: Удаляю добавленные столбцы и обработчики.');
        const table = document.querySelector(CONFIG.TABLE_SELECTOR);
        if (!table) return;

        const headerRow = table.querySelector('thead tr');
        if (headerRow) {
            ['country', 'city', 'provider'].forEach(geoType => {
                const th = headerRow.querySelector(`th[data-geo="${geoType}"]`);
                if (th) th.remove();
            });
        }

        const rows = table.querySelectorAll('tbody tr:not(.' + CONFIG.SUBTABLE_ROW_CLASS + ')');
        rows.forEach(row => {
            ['country', 'city', 'provider'].forEach(geoType => {
                const td = row.querySelector(`td[data-geo="${geoType}"]`);
                if (td) td.remove();
            });
            const ipTd = row.children[2];
            if (ipTd) {
                ipTd.style.cursor = '';
                ipTd.style.textDecoration = '';
                ipTd.style.color = '';
                ipTd.title = '';
                ipTd.onclick = null;
            }
        });

        const subRows = document.querySelectorAll(`tr.${CONFIG.SUBTABLE_ROW_CLASS}`);
        subRows.forEach(subRow => {
            const subTd = subRow.querySelector('td[colspan]');
            if (subTd && subTd.getAttribute('colspan') !== CONFIG.ORIGINAL_TABLE_COLS.toString()) {
                console.log(`GeoIP Enhanced: Сбрасываю colspan подтаблицы: ${subTd.getAttribute('colspan')} -> ${CONFIG.ORIGINAL_TABLE_COLS}`);
                subTd.setAttribute('colspan', CONFIG.ORIGINAL_TABLE_COLS);
            }
        });
    }


    async function processIP(ip, rows) {
      console.log(`GeoIP Enhanced: Начинаю обработку IP ${ip}`);
      const geoData = await API.fetchGeo(ip);
      rows.forEach(row => {
        const ipTd = row.children[2];
        if (ipTd && ipTd.textContent.trim() === ip) {
          const countryTd = row.querySelector('td[data-geo="country"]');
          const cityTd = row.querySelector('td[data-geo="city"]');
          // Пропускаем, если данные уже установлены
          if (countryTd && cityTd && countryTd.innerHTML && cityTd.innerHTML &&
              countryTd.innerHTML !== 'Загрузка...' && cityTd.innerHTML !== 'Загрузка...') {
            console.log(`GeoIP Enhanced: Пропускаю обновление для IP ${ip}, данные уже есть.`);
            return;
          }
          console.log(`GeoIP Enhanced: Обновляю строку для IP ${ip}:`, geoData);
          if (countryTd) countryTd.innerHTML = geoData.country;
          if (cityTd) cityTd.innerHTML = geoData.city;
        }
      });
    }

    function initGeoLookup() {
      if (isProcessing) {
        console.log('GeoIP Enhanced: Таблица уже обрабатывается.');
        return false;
      }

      const table = document.querySelector(CONFIG.TABLE_SELECTOR);
      if (!table) {
        console.log('GeoIP Enhanced: Главная таблица не найдена.');
        return false;
      }

      isProcessing = true;
      console.log('GeoIP Enhanced: Обнаружена таблица, начинаю обработку.');

      const thead = table.querySelector('thead');
      const tbody = table.querySelector('tbody');
      if (!thead || !tbody) {
        console.error('GeoIP Enhanced: Не найдены thead или tbody.');
        isProcessing = false;
        return true;
      }

      // Добавляем заголовки
      const headerRow = thead.querySelector('tr');
      const ipTh = headerRow.children[2];
      if (!ipTh) {
        console.error('GeoIP Enhanced: Не найден заголовок IP.');
        isProcessing = false;
        return true;
      }

      if (!headerRow.querySelector('th[data-geo="country"]')) {
        console.log('GeoIP Enhanced: Добавляю столбцы: Страна, Город, Провайдер.');
        const countryTh = document.createElement('th');
        countryTh.textContent = 'Страна';
        countryTh.setAttribute('data-geo', 'country');
        ipTh.after(countryTh);

        const cityTh = document.createElement('th');
        cityTh.textContent = 'Город';
        cityTh.setAttribute('data-geo', 'city');
        countryTh.after(cityTh);

        const providerTh = document.createElement('th');
        providerTh.textContent = 'Провайдер';
        providerTh.setAttribute('data-geo', 'provider');
        cityTh.after(providerTh);
      }

      // Собираем IP
      const rows = Array.from(tbody.querySelectorAll(`tr:not(.${CONFIG.SUBTABLE_ROW_CLASS})`));
      const uniqueIPs = new Set();
      rows.forEach(row => {
        const ipTd = row.children[2];
        if (ipTd) {
          const ip = ipTd.textContent.trim();
          if (ip && Helpers.isValidIP(ip)) {
            uniqueIPs.add(ip);
          }
        }
      });

      // Автозагрузка
      const pageElement = document.querySelector(CONFIG.PAGINATION_SELECTOR);
      const currentPage = pageElement ? (parseInt(pageElement.getAttribute('data-page')) + 1).toString() : '1';
      const autoLoadIPs = currentPage === '1' ? Array.from(uniqueIPs).slice(0, CONFIG.AUTO_LOAD_COUNT) : [];
      if (autoLoadIPs.length > 0) {
        console.log(`GeoIP Enhanced: Найдено ${uniqueIPs.size} IP, страница ${currentPage}. Автозагрузка ${autoLoadIPs.length}:`, autoLoadIPs);
      }

      // Добавляем ячейки в строки
      const addedIPs = new Set();
      rows.forEach(row => {
        const ipTd = row.children[2];
        const ip = ipTd?.textContent.trim();
        const countryTd = row.querySelector('td[data-geo="country"]');
        const cityTd = row.querySelector('td[data-geo="city"]');
        const providerTd = row.querySelector('td[data-geo="provider"]');

        // Пропускаем заполненные строки
        if (countryTd && cityTd && providerTd &&
            countryTd.innerHTML && cityTd.innerHTML && providerTd.innerHTML &&
            countryTd.innerHTML !== 'Загрузка...' && cityTd.innerHTML !== 'Загрузка...') {
          console.log(`GeoIP Enhanced: Пропускаю строку для IP ${ip}, данные уже есть.`);
          return;
        }

        if (!countryTd) { // Добавляем ячейки, если их нет
          if (ip && Helpers.isValidIP(ip) && !addedIPs.has(ip)) {
            console.log(`GeoIP Enhanced: Добавляю ячейки для IP ${ip}`);
            addedIPs.add(ip);
          }

          if (ip && Helpers.isValidIP(ip)) {
            ipTd.style.cursor = 'pointer';
            ipTd.style.textDecoration = 'underline';
            ipTd.style.color = 'blue';
            ipTd.title = 'Кликните, чтобы скопировать &dev-request-ip=' + ip;
            ipTd.onclick = () => Helpers.copyToClipboard(`&dev-request-ip=${ip}`, ipTd);
          }

          const newCountryTd = document.createElement('td');
          newCountryTd.setAttribute('data-geo', 'country');
          const newCityTd = document.createElement('td');
          newCityTd.setAttribute('data-geo', 'city');
          const newProviderTd = document.createElement('td');
          newProviderTd.setAttribute('data-geo', 'provider');

          const cached = ip && Helpers.isValidIP(ip) ? Cache.get(ip) : null;
          if (cached) {
            newCountryTd.innerHTML = cached.country;
            newCityTd.innerHTML = cached.city;
            if (cached.provider !== 'N/A') {
              newProviderTd.innerHTML = cached.provider;
            } else {
              const loadProviderButton = document.createElement('button');
              loadProviderButton.textContent = 'Загрузить';
              loadProviderButton.setAttribute('data-ip', ip);
              loadProviderButton.onclick = async function () {
                this.disabled = true;
                this.textContent = 'Загрузка...';
                const buttonIP = this.getAttribute('data-ip');
                const provider = await API.fetchWhois(buttonIP);
                rows.forEach(r => {
                  if (r.children[2].textContent.trim() === buttonIP) {
                    r.querySelector('td[data-geo="provider"]').innerHTML = provider;
                  }
                });
              };
              newProviderTd.appendChild(loadProviderButton);
            }
          } else {
            if (ip && Helpers.isValidIP(ip) && autoLoadIPs.includes(ip)) {
              newCountryTd.textContent = 'Загрузка...';
              newCityTd.textContent = 'Загрузка...';
            } else if (ip && Helpers.isValidIP(ip)) {
              const loadGeoButton = document.createElement('button');
              loadGeoButton.textContent = 'Загрузить';
              loadGeoButton.setAttribute('data-ip', ip);
              loadGeoButton.onclick = async function () {
                this.disabled = true;
                this.textContent = 'Загрузка...';
                const buttonIP = this.getAttribute('data-ip');
                const geoData = await API.fetchGeo(buttonIP);
                rows.forEach(r => {
                  if (r.children[2].textContent.trim() === buttonIP) {
                    r.querySelector('td[data-geo="country"]').innerHTML = geoData.country;
                    r.querySelector('td[data-geo="city"]').innerHTML = geoData.city;
                  }
                });
              };
              newCountryTd.appendChild(loadGeoButton);
              newCityTd.textContent = 'Загрузка...';
            }
            if (ip && Helpers.isValidIP(ip)) {
              const loadProviderButton = document.createElement('button');
              loadProviderButton.textContent = 'Загрузить';
              loadProviderButton.setAttribute('data-ip', ip);
              loadProviderButton.onclick = async function () {
                this.disabled = true;
                this.textContent = 'Загрузка...';
                const buttonIP = this.getAttribute('data-ip');
                const provider = await API.fetchWhois(buttonIP);
                rows.forEach(r => {
                  if (r.children[2].textContent.trim() === buttonIP) {
                    r.querySelector('td[data-geo="provider"]').innerHTML = provider;
                  }
                });
              };
              newProviderTd.appendChild(loadProviderButton);
            }
          }

          if (ip && Helpers.isValidIP(ip)) {
            ipTd.after(newCountryTd, newCityTd, newProviderTd);
          }
        }
      });

      // Автозагрузка
      if (autoLoadIPs.length > 0) {
        let index = 0;
        function processNext() {
          if (index >= autoLoadIPs.length) {
            console.log('GeoIP Enhanced: Автоматическая загрузка завершена.');
            isProcessing = false;
            adjustSubtableColspan();
            return;
          }
          const ip = autoLoadIPs[index];
          processIP(ip, rows)
            .then(() => {
                index++;
                console.log(`GeoIP Enhanced: Обработан IP ${ip}, осталось: ${autoLoadIPs.length - index}`);
                processNext();
            })
            .catch(error => {
                console.error(`GeoIP Enhanced: Ошибка при обработке IP ${ip}:`, error);
                rows.forEach(row => {
                  const ipTd = row.children[2];
                  if (ipTd && ipTd.textContent.trim() === ip) {
                    const countryTd = row.querySelector('td[data-geo="country"]');
                    const cityTd = row.querySelector('td[data-geo="city"]');
                    if (countryTd) countryTd.innerHTML = 'Ошибка';
                    if (cityTd) cityTd.innerHTML = 'Ошибка';
                  }
                });
                index++;
                processNext();
            });
        }
        processNext();
      } else {
        isProcessing = false;
        adjustSubtableColspan();
      }

      return true;
    }

    return { initGeoLookup, adjustSubtableColspan, removeGeoColumnsAndHandlers };
  })();

  // --- ИНИЦИАЛИЗАЦИЯ ---
  // Создаём тумблер
  FeatureToggle.createToggle();

  // Настраиваем MutationObserver (ссылка будет передана в FeatureToggle)
  const targetNode = document.querySelector(CONFIG.TAB_CONTENT_ID) || document.body;
  const observer = new MutationObserver((mutationsList) => {
    if (TableManager.isProcessing) { // Используем флаг из TableManager, если он доступен
        let isProcessingTable = false; // Локальный флаг для observer
        if (isProcessingTable) {
            console.log('GeoIP Enhanced: Таблица обрабатывается, пропускаю изменения.');
            return;
        }
    }

    let tableChanged = false;
    let subtableAdded = false;

    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        const addedOrRemoved = [...mutation.addedNodes, ...mutation.removedNodes];
        for (const node of addedOrRemoved) {
          if (node.nodeType === 1) {
            if (node.matches(CONFIG.TABLE_SELECTOR) ||
                node.querySelector(CONFIG.TABLE_SELECTOR) ||
                (node.matches('tbody') && node.closest(CONFIG.TABLE_SELECTOR) && node.querySelector('tr:not(.' + CONFIG.SUBTABLE_ROW_CLASS + ')')) ||
                (node.matches('tr:not(.' + CONFIG.SUBTABLE_ROW_CLASS + ')') && node.closest(CONFIG.TABLE_SELECTOR) && node.querySelector('td'))) {
              tableChanged = true;
            }
            if (node.matches(`tr.${CONFIG.SUBTABLE_ROW_CLASS}`) ||
                node.querySelector(`tr.${CONFIG.SUBTABLE_ROW_CLASS}`) ||
                node.matches('table.bg-gray') ||
                node.querySelector('table.bg-gray')) {
              subtableAdded = true;
            }
          }
        }
      }
    }

    if (tableChanged) {
      console.log('GeoIP Enhanced: Обнаружено изменение в основной таблице.');
      if (FeatureToggle.isFeatureEnabled()) {
          console.log('GeoIP Enhanced: Функция включена, запускаю initGeoLookup.');
          TableManager.initGeoLookup();
      } else {
          console.log('GeoIP Enhanced: Функция выключена, игнорирую изменения.');
      }
    } else if (subtableAdded) {
      console.log('GeoIP Enhanced: Обнаружено добавление подтаблицы.');
      if (FeatureToggle.isFeatureEnabled()) {
          console.log('GeoIP Enhanced: Функция включена, корректирую colspan.');
          TableManager.adjustSubtableColspan();
      } else {
          console.log('GeoIP Enhanced: Функция выключена, игнорирую изменение colspan.');
      }
    }
  });

  // Передаём observer в FeatureToggle
  FeatureToggle.observer = observer;

  // Инициализируем функциональность в зависимости от сохранённого состояния
  if (FeatureToggle.isFeatureEnabled()) {
    FeatureToggle.enableFeatures();
  } else {
    FeatureToggle.disableFeatures();
  }

  console.log('GeoIP Enhanced: Инициализация завершена.');
})();
